<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="5" skipped="0" tests="11" time="21.852" timestamp="2024-12-26T18:12:48.862979+05:30" hostname="LAP-55354"><testcase classname="src.tests.middleware_tests.test_middleware.TestAuthMiddleware" name="test_exempt_routes_login" time="0.171" /><testcase classname="src.tests.middleware_tests.test_middleware.TestAuthMiddleware" name="test_exempt_routes_signup" time="0.023" /><testcase classname="src.tests.middleware_tests.test_middleware.TestAuthMiddleware" name="test_missing_auth_header" time="0.023"><failure message="fastapi.exceptions.HTTPException: 401: {'status': 'fail', 'message': 'Missing or invalid token', 'error_code': 4104}">+ Exception Group Traceback (most recent call last):
  |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\_utils.py", line 76, in collapse_excgroups
  |     yield
  |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\middleware\base.py", line 186, in __call__
  |     async with anyio.create_task_group() as task_group:
  |                ~~~~~~~~~~~~~~~~~~~~~~~^^
  |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\anyio\_backends\_asyncio.py", line 815, in __aexit__
  |     raise BaseExceptionGroup(
  |         "unhandled errors in a TaskGroup", self._exceptions
  |     )
  | ExceptionGroup: unhandled errors in a TaskGroup (1 sub-exception)
  +-+---------------- 1 ----------------
    | Traceback (most recent call last):
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\_pytest\runner.py", line 341, in from_call
    |     result: TResult | None = func()
    |                              ~~~~^^
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\_pytest\runner.py", line 242, in &lt;lambda&gt;
    |     lambda: runtest_hook(item=item, **kwds), when=when, reraise=reraise
    |             ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\pluggy\_hooks.py", line 513, in __call__
    |     return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
    |            ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\pluggy\_manager.py", line 120, in _hookexec
    |     return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
    |            ~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\pluggy\_callers.py", line 182, in _multicall
    |     return outcome.get_result()
    |            ~~~~~~~~~~~~~~~~~~^^
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\pluggy\_result.py", line 100, in get_result
    |     raise exc.with_traceback(exc.__traceback__)
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\pluggy\_callers.py", line 167, in _multicall
    |     teardown.throw(outcome._exception)
    |     ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\_pytest\threadexception.py", line 92, in pytest_runtest_call
    |     yield from thread_exception_runtest_hook()
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\_pytest\threadexception.py", line 68, in thread_exception_runtest_hook
    |     yield
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\pluggy\_callers.py", line 167, in _multicall
    |     teardown.throw(outcome._exception)
    |     ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\_pytest\unraisableexception.py", line 95, in pytest_runtest_call
    |     yield from unraisable_exception_runtest_hook()
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\_pytest\unraisableexception.py", line 70, in unraisable_exception_runtest_hook
    |     yield
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\pluggy\_callers.py", line 167, in _multicall
    |     teardown.throw(outcome._exception)
    |     ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\_pytest\logging.py", line 846, in pytest_runtest_call
    |     yield from self._runtest_for(item, "call")
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\_pytest\logging.py", line 829, in _runtest_for
    |     yield
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\pluggy\_callers.py", line 167, in _multicall
    |     teardown.throw(outcome._exception)
    |     ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\_pytest\capture.py", line 880, in pytest_runtest_call
    |     return (yield)
    |             ^^^^^
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\pluggy\_callers.py", line 167, in _multicall
    |     teardown.throw(outcome._exception)
    |     ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\_pytest\skipping.py", line 257, in pytest_runtest_call
    |     return (yield)
    |             ^^^^^
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\pluggy\_callers.py", line 103, in _multicall
    |     res = hook_impl.function(*args)
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\_pytest\runner.py", line 174, in pytest_runtest_call
    |     item.runtest()
    |     ~~~~~~~~~~~~^^
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\_pytest\python.py", line 1627, in runtest
    |     self.ihook.pytest_pyfunc_call(pyfuncitem=self)
    |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\pluggy\_hooks.py", line 513, in __call__
    |     return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
    |            ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\pluggy\_manager.py", line 120, in _hookexec
    |     return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
    |            ~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\pluggy\_callers.py", line 182, in _multicall
    |     return outcome.get_result()
    |            ~~~~~~~~~~~~~~~~~~^^
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\pluggy\_result.py", line 100, in get_result
    |     raise exc.with_traceback(exc.__traceback__)
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\pluggy\_callers.py", line 103, in _multicall
    |     res = hook_impl.function(*args)
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\_pytest\python.py", line 159, in pytest_pyfunc_call
    |     result = testfunction(**testargs)
    |   File "C:\Users\bjain\OneDrive - WatchGuard Technologies Inc\Python\Project\Library_Management\src\tests\middleware_tests\test_middleware.py", line 67, in test_missing_auth_header
    |     response = self.client.get("/test-protected")
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\testclient.py", line 514, in get
    |     return super().get(
    |            ~~~~~~~~~~~^
    |         url,
    |         ^^^^
    |     ...&lt;6 lines&gt;...
    |         extensions=extensions,
    |         ^^^^^^^^^^^^^^^^^^^^^^
    |     )
    |     ^
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\httpx\_client.py", line 1053, in get
    |     return self.request(
    |            ~~~~~~~~~~~~^
    |         "GET",
    |         ^^^^^^
    |     ...&lt;7 lines&gt;...
    |         extensions=extensions,
    |         ^^^^^^^^^^^^^^^^^^^^^^
    |     )
    |     ^
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\testclient.py", line 484, in request
    |     return super().request(
    |            ~~~~~~~~~~~~~~~^
    |         method,
    |         ^^^^^^^
    |     ...&lt;11 lines&gt;...
    |         extensions=extensions,
    |         ^^^^^^^^^^^^^^^^^^^^^^
    |     )
    |     ^
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\httpx\_client.py", line 825, in request
    |     return self.send(request, auth=auth, follow_redirects=follow_redirects)
    |            ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\httpx\_client.py", line 914, in send
    |     response = self._send_handling_auth(
    |         request,
    |     ...&lt;2 lines&gt;...
    |         history=[],
    |     )
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\httpx\_client.py", line 942, in _send_handling_auth
    |     response = self._send_handling_redirects(
    |         request,
    |         follow_redirects=follow_redirects,
    |         history=history,
    |     )
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\httpx\_client.py", line 979, in _send_handling_redirects
    |     response = self._send_single_request(request)
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\httpx\_client.py", line 1014, in _send_single_request
    |     response = transport.handle_request(request)
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\testclient.py", line 377, in handle_request
    |     raise exc
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\testclient.py", line 374, in handle_request
    |     portal.call(self.app, scope, receive, send)
    |     ~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\anyio\from_thread.py", line 290, in call
    |     return cast(T_Retval, self.start_task_soon(func, *args).result())
    |                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
    |   File "C:\Program Files\Python313\Lib\concurrent\futures\_base.py", line 456, in result
    |     return self.__get_result()
    |            ~~~~~~~~~~~~~~~~~^^
    |   File "C:\Program Files\Python313\Lib\concurrent\futures\_base.py", line 401, in __get_result
    |     raise self._exception
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\anyio\from_thread.py", line 221, in _call_func
    |     retval = await retval_or_awaitable
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\fastapi\applications.py", line 1054, in __call__
    |     await super().__call__(scope, receive, send)
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\applications.py", line 113, in __call__
    |     await self.middleware_stack(scope, receive, send)
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\middleware\errors.py", line 187, in __call__
    |     raise exc
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\middleware\errors.py", line 165, in __call__
    |     await self.app(scope, receive, _send)
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\middleware\base.py", line 185, in __call__
    |     with collapse_excgroups():
    |          ~~~~~~~~~~~~~~~~~~^^
    |   File "C:\Program Files\Python313\Lib\contextlib.py", line 162, in __exit__
    |     self.gen.throw(value)
    |     ~~~~~~~~~~~~~~^^^^^^^
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\_utils.py", line 82, in collapse_excgroups
    |     raise exc
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\middleware\base.py", line 187, in __call__
    |     response = await self.dispatch_func(request, call_next)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "C:\Users\bjain\OneDrive - WatchGuard Technologies Inc\Python\Project\Library_Management\src\app\middleware\middleware.py", line 23, in dispatch
    |     raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,
    |                         detail=Response.response(MISSING_OR_INVALID_TOKEN, Status.FAIL.value, TOKEN_MISSING))
    | fastapi.exceptions.HTTPException: 401: {'status': 'fail', 'message': 'Missing or invalid token', 'error_code': 4104}
    +------------------------------------

During handling of the above exception, another exception occurred:

self = &lt;src.tests.middleware_tests.test_middleware.TestAuthMiddleware object at 0x0000012656319940&gt;

    def test_missing_auth_header(self):
        """Test request without Authorization header"""
&gt;       response = self.client.get("/test-protected")

self       = &lt;src.tests.middleware_tests.test_middleware.TestAuthMiddleware object at 0x0000012656319940&gt;

test_middleware.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\testclient.py:514: in get
    return super().get(
        __class__  = &lt;class 'starlette.testclient.TestClient'&gt;
        allow_redirects = None
        auth       = &lt;httpx._client.UseClientDefault object at 0x0000012655EBC590&gt;
        cookies    = None
        extensions = None
        follow_redirects = None
        headers    = None
        params     = None
        redirect   = &lt;httpx._client.UseClientDefault object at 0x0000012655EBC590&gt;
        self       = &lt;starlette.testclient.TestClient object at 0x00000126562E2900&gt;
        timeout    = &lt;httpx._client.UseClientDefault object at 0x0000012655EBC590&gt;
        url        = '/test-protected'
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\httpx\_client.py:1053: in get
    return self.request(
        auth       = &lt;httpx._client.UseClientDefault object at 0x0000012655EBC590&gt;
        cookies    = None
        extensions = None
        follow_redirects = &lt;httpx._client.UseClientDefault object at 0x0000012655EBC590&gt;
        headers    = None
        params     = None
        self       = &lt;starlette.testclient.TestClient object at 0x00000126562E2900&gt;
        timeout    = &lt;httpx._client.UseClientDefault object at 0x0000012655EBC590&gt;
        url        = '/test-protected'
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\testclient.py:484: in request
    return super().request(
        __class__  = &lt;class 'starlette.testclient.TestClient'&gt;
        allow_redirects = None
        auth       = &lt;httpx._client.UseClientDefault object at 0x0000012655EBC590&gt;
        content    = None
        cookies    = None
        data       = None
        extensions = None
        files      = None
        follow_redirects = &lt;httpx._client.UseClientDefault object at 0x0000012655EBC590&gt;
        headers    = None
        json       = None
        method     = 'GET'
        params     = None
        redirect   = &lt;httpx._client.UseClientDefault object at 0x0000012655EBC590&gt;
        self       = &lt;starlette.testclient.TestClient object at 0x00000126562E2900&gt;
        timeout    = &lt;httpx._client.UseClientDefault object at 0x0000012655EBC590&gt;
        url        = URL('http://testserver/test-protected')
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\httpx\_client.py:825: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
        auth       = &lt;httpx._client.UseClientDefault object at 0x0000012655EBC590&gt;
        content    = None
        cookies    = None
        data       = None
        extensions = None
        files      = None
        follow_redirects = &lt;httpx._client.UseClientDefault object at 0x0000012655EBC590&gt;
        headers    = None
        json       = None
        method     = 'GET'
        params     = None
        request    = &lt;Request('GET', 'http://testserver/test-protected')&gt;
        self       = &lt;starlette.testclient.TestClient object at 0x00000126562E2900&gt;
        timeout    = &lt;httpx._client.UseClientDefault object at 0x0000012655EBC590&gt;
        url        = URL('http://testserver/test-protected')
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\httpx\_client.py:914: in send
    response = self._send_handling_auth(
        auth       = &lt;httpx.Auth object at 0x000001265632B610&gt;
        follow_redirects = True
        request    = &lt;Request('GET', 'http://testserver/test-protected')&gt;
        self       = &lt;starlette.testclient.TestClient object at 0x00000126562E2900&gt;
        stream     = False
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\httpx\_client.py:942: in _send_handling_auth
    response = self._send_handling_redirects(
        auth       = &lt;httpx.Auth object at 0x000001265632B610&gt;
        auth_flow  = &lt;generator object Auth.sync_auth_flow at 0x0000012656359540&gt;
        follow_redirects = True
        history    = []
        request    = &lt;Request('GET', 'http://testserver/test-protected')&gt;
        self       = &lt;starlette.testclient.TestClient object at 0x00000126562E2900&gt;
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\httpx\_client.py:979: in _send_handling_redirects
    response = self._send_single_request(request)
        follow_redirects = True
        history    = []
        request    = &lt;Request('GET', 'http://testserver/test-protected')&gt;
        self       = &lt;starlette.testclient.TestClient object at 0x00000126562E2900&gt;
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\httpx\_client.py:1014: in _send_single_request
    response = transport.handle_request(request)
        request    = &lt;Request('GET', 'http://testserver/test-protected')&gt;
        self       = &lt;starlette.testclient.TestClient object at 0x00000126562E2900&gt;
        start      = 276893.8382559
        transport  = &lt;starlette.testclient._TestClientTransport object at 0x00000126562E2A50&gt;
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\testclient.py:377: in handle_request
    raise exc
        context    = None
        default_port = 80
        headers    = [(b'host', b'testserver'),
 (b'accept', b'*/*'),
 (b'accept-encoding', b'gzip, deflate'),
 (b'connection', b'keep-alive'),
 (b'user-agent', b'testclient')]
        host       = 'testserver'
        netloc     = 'testserver'
        path       = '/test-protected'
        port       = 80
        portal     = &lt;anyio._backends._asyncio.BlockingPortal object at 0x00000126563D8190&gt;
        query      = ''
        raw_kwargs = {'headers': [('content-length', '21'),
             ('content-type', 'text/plain; charset=utf-8')],
 'status_code': 500,
 'stream': &lt;_io.BytesIO object at 0x000001265639AFC0&gt;}
        raw_path   = b'/test-protected'
        receive    = &lt;function _TestClientTransport.handle_request.&lt;locals&gt;.receive at 0x00000126563A6C00&gt;
        request    = &lt;Request('GET', 'http://testserver/test-protected')&gt;
        request_complete = False
        response_complete = &lt;anyio._backends._asyncio.Event object at 0x000001265636B040&gt;
        response_started = True
        scheme     = 'http'
        scope      = {'app': &lt;fastapi.applications.FastAPI object at 0x00000126562E1D30&gt;,
 'client': ['testclient', 50000],
 'extensions': {'http.response.debug': {}},
 'headers': [(b'host', b'testserver'),
             (b'accept', b'*/*'),
             (b'accept-encoding', b'gzip, deflate'),
             (b'connection', b'keep-alive'),
             (b'user-agent', b'testclient')],
 'http_version': '1.1',
 'method': 'GET',
 'path': '/test-protected',
 'query_string': b'',
 'raw_path': b'/test-protected',
 'root_path': '',
 'scheme': 'http',
 'server': ['testserver', 80],
 'state': {},
 'type': 'http'}
        self       = &lt;starlette.testclient._TestClientTransport object at 0x00000126562E2A50&gt;
        send       = &lt;function _TestClientTransport.handle_request.&lt;locals&gt;.send at 0x00000126563A5EE0&gt;
        template   = None
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\testclient.py:374: in handle_request
    portal.call(self.app, scope, receive, send)
        context    = None
        default_port = 80
        headers    = [(b'host', b'testserver'),
 (b'accept', b'*/*'),
 (b'accept-encoding', b'gzip, deflate'),
 (b'connection', b'keep-alive'),
 (b'user-agent', b'testclient')]
        host       = 'testserver'
        netloc     = 'testserver'
        path       = '/test-protected'
        port       = 80
        portal     = &lt;anyio._backends._asyncio.BlockingPortal object at 0x00000126563D8190&gt;
        query      = ''
        raw_kwargs = {'headers': [('content-length', '21'),
             ('content-type', 'text/plain; charset=utf-8')],
 'status_code': 500,
 'stream': &lt;_io.BytesIO object at 0x000001265639AFC0&gt;}
        raw_path   = b'/test-protected'
        receive    = &lt;function _TestClientTransport.handle_request.&lt;locals&gt;.receive at 0x00000126563A6C00&gt;
        request    = &lt;Request('GET', 'http://testserver/test-protected')&gt;
        request_complete = False
        response_complete = &lt;anyio._backends._asyncio.Event object at 0x000001265636B040&gt;
        response_started = True
        scheme     = 'http'
        scope      = {'app': &lt;fastapi.applications.FastAPI object at 0x00000126562E1D30&gt;,
 'client': ['testclient', 50000],
 'extensions': {'http.response.debug': {}},
 'headers': [(b'host', b'testserver'),
             (b'accept', b'*/*'),
             (b'accept-encoding', b'gzip, deflate'),
             (b'connection', b'keep-alive'),
             (b'user-agent', b'testclient')],
 'http_version': '1.1',
 'method': 'GET',
 'path': '/test-protected',
 'query_string': b'',
 'raw_path': b'/test-protected',
 'root_path': '',
 'scheme': 'http',
 'server': ['testserver', 80],
 'state': {},
 'type': 'http'}
        self       = &lt;starlette.testclient._TestClientTransport object at 0x00000126562E2A50&gt;
        send       = &lt;function _TestClientTransport.handle_request.&lt;locals&gt;.send at 0x00000126563A5EE0&gt;
        template   = None
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\anyio\from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
        args       = ({'app': &lt;fastapi.applications.FastAPI object at 0x00000126562E1D30&gt;,
  'client': ['testclient', 50000],
  'extensions': {'http.response.debug': {}},
  'headers': [(b'host', b'testserver'),
              (b'accept', b'*/*'),
              (b'accept-encoding', b'gzip, deflate'),
              (b'connection', b'keep-alive'),
              (b'user-agent', b'testclient')],
  'http_version': '1.1',
  'method': 'GET',
  'path': '/test-protected',
  'query_string': b'',
  'raw_path': b'/test-protected',
  'root_path': '',
  'scheme': 'http',
  'server': ['testserver', 80],
  'state': {},
  'type': 'http'},
 &lt;function _TestClientTransport.handle_request.&lt;locals&gt;.receive at 0x00000126563A6C00&gt;,
 &lt;function _TestClientTransport.handle_request.&lt;locals&gt;.send at 0x00000126563A5EE0&gt;)
        func       = &lt;fastapi.applications.FastAPI object at 0x00000126562E1D30&gt;
        self       = &lt;anyio._backends._asyncio.BlockingPortal object at 0x00000126563D8190&gt;
C:\Program Files\Python313\Lib\concurrent\futures\_base.py:456: in result
    return self.__get_result()
        self       = None
        timeout    = None
C:\Program Files\Python313\Lib\concurrent\futures\_base.py:401: in __get_result
    raise self._exception
        self       = None
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\anyio\from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
        args       = ({'app': &lt;fastapi.applications.FastAPI object at 0x00000126562E1D30&gt;,
  'client': ['testclient', 50000],
  'extensions': {'http.response.debug': {}},
  'headers': [(b'host', b'testserver'),
              (b'accept', b'*/*'),
              (b'accept-encoding', b'gzip, deflate'),
              (b'connection', b'keep-alive'),
              (b'user-agent', b'testclient')],
  'http_version': '1.1',
  'method': 'GET',
  'path': '/test-protected',
  'query_string': b'',
  'raw_path': b'/test-protected',
  'root_path': '',
  'scheme': 'http',
  'server': ['testserver', 80],
  'state': {},
  'type': 'http'},
 &lt;function _TestClientTransport.handle_request.&lt;locals&gt;.receive at 0x00000126563A6C00&gt;,
 &lt;function _TestClientTransport.handle_request.&lt;locals&gt;.send at 0x00000126563A5EE0&gt;)
        callback   = &lt;function BlockingPortal._call_func.&lt;locals&gt;.callback at 0x00000126563A6520&gt;
        func       = &lt;fastapi.applications.FastAPI object at 0x00000126562E1D30&gt;
        future     = &lt;Future at 0x12656395180 state=finished raised HTTPException&gt;
        kwargs     = {}
        retval_or_awaitable = &lt;coroutine object FastAPI.__call__ at 0x00000126563B54E0&gt;
        scope      = None
        self       = &lt;anyio._backends._asyncio.BlockingPortal object at 0x00000126563D8190&gt;
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\fastapi\applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
        __class__  = &lt;class 'fastapi.applications.FastAPI'&gt;
        receive    = &lt;function _TestClientTransport.handle_request.&lt;locals&gt;.receive at 0x00000126563A6C00&gt;
        scope      = {'app': &lt;fastapi.applications.FastAPI object at 0x00000126562E1D30&gt;,
 'client': ['testclient', 50000],
 'extensions': {'http.response.debug': {}},
 'headers': [(b'host', b'testserver'),
             (b'accept', b'*/*'),
             (b'accept-encoding', b'gzip, deflate'),
             (b'connection', b'keep-alive'),
             (b'user-agent', b'testclient')],
 'http_version': '1.1',
 'method': 'GET',
 'path': '/test-protected',
 'query_string': b'',
 'raw_path': b'/test-protected',
 'root_path': '',
 'scheme': 'http',
 'server': ['testserver', 80],
 'state': {},
 'type': 'http'}
        self       = &lt;fastapi.applications.FastAPI object at 0x00000126562E1D30&gt;
        send       = &lt;function _TestClientTransport.handle_request.&lt;locals&gt;.send at 0x00000126563A5EE0&gt;
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\applications.py:113: in __call__
    await self.middleware_stack(scope, receive, send)
        receive    = &lt;function _TestClientTransport.handle_request.&lt;locals&gt;.receive at 0x00000126563A6C00&gt;
        scope      = {'app': &lt;fastapi.applications.FastAPI object at 0x00000126562E1D30&gt;,
 'client': ['testclient', 50000],
 'extensions': {'http.response.debug': {}},
 'headers': [(b'host', b'testserver'),
             (b'accept', b'*/*'),
             (b'accept-encoding', b'gzip, deflate'),
             (b'connection', b'keep-alive'),
             (b'user-agent', b'testclient')],
 'http_version': '1.1',
 'method': 'GET',
 'path': '/test-protected',
 'query_string': b'',
 'raw_path': b'/test-protected',
 'root_path': '',
 'scheme': 'http',
 'server': ['testserver', 80],
 'state': {},
 'type': 'http'}
        self       = &lt;fastapi.applications.FastAPI object at 0x00000126562E1D30&gt;
        send       = &lt;function _TestClientTransport.handle_request.&lt;locals&gt;.send at 0x00000126563A5EE0&gt;
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\middleware\errors.py:187: in __call__
    raise exc
        _send      = &lt;function ServerErrorMiddleware.__call__.&lt;locals&gt;._send at 0x00000126563A6340&gt;
        receive    = &lt;function _TestClientTransport.handle_request.&lt;locals&gt;.receive at 0x00000126563A6C00&gt;
        request    = &lt;starlette.requests.Request object at 0x00000126563A9810&gt;
        response   = &lt;starlette.responses.PlainTextResponse object at 0x000001265634E7B0&gt;
        response_started = False
        scope      = {'app': &lt;fastapi.applications.FastAPI object at 0x00000126562E1D30&gt;,
 'client': ['testclient', 50000],
 'extensions': {'http.response.debug': {}},
 'headers': [(b'host', b'testserver'),
             (b'accept', b'*/*'),
             (b'accept-encoding', b'gzip, deflate'),
             (b'connection', b'keep-alive'),
             (b'user-agent', b'testclient')],
 'http_version': '1.1',
 'method': 'GET',
 'path': '/test-protected',
 'query_string': b'',
 'raw_path': b'/test-protected',
 'root_path': '',
 'scheme': 'http',
 'server': ['testserver', 80],
 'state': {},
 'type': 'http'}
        self       = &lt;starlette.middleware.errors.ServerErrorMiddleware object at 0x000001265634F380&gt;
        send       = &lt;function _TestClientTransport.handle_request.&lt;locals&gt;.send at 0x00000126563A5EE0&gt;
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\middleware\errors.py:165: in __call__
    await self.app(scope, receive, _send)
        _send      = &lt;function ServerErrorMiddleware.__call__.&lt;locals&gt;._send at 0x00000126563A6340&gt;
        receive    = &lt;function _TestClientTransport.handle_request.&lt;locals&gt;.receive at 0x00000126563A6C00&gt;
        request    = &lt;starlette.requests.Request object at 0x00000126563A9810&gt;
        response   = &lt;starlette.responses.PlainTextResponse object at 0x000001265634E7B0&gt;
        response_started = False
        scope      = {'app': &lt;fastapi.applications.FastAPI object at 0x00000126562E1D30&gt;,
 'client': ['testclient', 50000],
 'extensions': {'http.response.debug': {}},
 'headers': [(b'host', b'testserver'),
             (b'accept', b'*/*'),
             (b'accept-encoding', b'gzip, deflate'),
             (b'connection', b'keep-alive'),
             (b'user-agent', b'testclient')],
 'http_version': '1.1',
 'method': 'GET',
 'path': '/test-protected',
 'query_string': b'',
 'raw_path': b'/test-protected',
 'root_path': '',
 'scheme': 'http',
 'server': ['testserver', 80],
 'state': {},
 'type': 'http'}
        self       = &lt;starlette.middleware.errors.ServerErrorMiddleware object at 0x000001265634F380&gt;
        send       = &lt;function _TestClientTransport.handle_request.&lt;locals&gt;.send at 0x00000126563A5EE0&gt;
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\middleware\base.py:185: in __call__
    with collapse_excgroups():
        call_next  = &lt;function BaseHTTPMiddleware.__call__.&lt;locals&gt;.call_next at 0x00000126563A6D40&gt;
        receive    = &lt;function _TestClientTransport.handle_request.&lt;locals&gt;.receive at 0x00000126563A6C00&gt;
        request    = &lt;starlette.middleware.base._CachedRequest object at 0x00000126563D8410&gt;
        response_sent = &lt;anyio._backends._asyncio.Event object at 0x00000126563B19D0&gt;
        scope      = {'app': &lt;fastapi.applications.FastAPI object at 0x00000126562E1D30&gt;,
 'client': ['testclient', 50000],
 'extensions': {'http.response.debug': {}},
 'headers': [(b'host', b'testserver'),
             (b'accept', b'*/*'),
             (b'accept-encoding', b'gzip, deflate'),
             (b'connection', b'keep-alive'),
             (b'user-agent', b'testclient')],
 'http_version': '1.1',
 'method': 'GET',
 'path': '/test-protected',
 'query_string': b'',
 'raw_path': b'/test-protected',
 'root_path': '',
 'scheme': 'http',
 'server': ['testserver', 80],
 'state': {},
 'type': 'http'}
        self       = &lt;src.app.middleware.middleware.AuthMiddleware object at 0x000001265634F230&gt;
        send       = &lt;function ServerErrorMiddleware.__call__.&lt;locals&gt;._send at 0x00000126563A6340&gt;
        task_group = &lt;anyio._backends._asyncio.TaskGroup object at 0x000001265637A850&gt;
        wrapped_receive = &lt;bound method _CachedRequest.wrapped_receive of &lt;starlette.middleware.base._CachedRequest object at 0x00000126563D8410&gt;&gt;
C:\Program Files\Python313\Lib\contextlib.py:162: in __exit__
    self.gen.throw(value)
        self       = &lt;contextlib._GeneratorContextManager object at 0x000001265636F620&gt;
        traceback  = &lt;traceback object at 0x00000126563CE440&gt;
        typ        = &lt;class 'ExceptionGroup'&gt;
        value      = ExceptionGroup('unhandled errors in a TaskGroup', [HTTPException(status_code=401, detail={'status': 'fail', 'message': 'Missing or invalid token', 'error_code': 4104})])
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\_utils.py:82: in collapse_excgroups
    raise exc
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\middleware\base.py:187: in __call__
    response = await self.dispatch_func(request, call_next)
        call_next  = &lt;function BaseHTTPMiddleware.__call__.&lt;locals&gt;.call_next at 0x00000126563A6D40&gt;
        receive    = &lt;function _TestClientTransport.handle_request.&lt;locals&gt;.receive at 0x00000126563A6C00&gt;
        request    = &lt;starlette.middleware.base._CachedRequest object at 0x00000126563D8410&gt;
        response_sent = &lt;anyio._backends._asyncio.Event object at 0x00000126563B19D0&gt;
        scope      = {'app': &lt;fastapi.applications.FastAPI object at 0x00000126562E1D30&gt;,
 'client': ['testclient', 50000],
 'extensions': {'http.response.debug': {}},
 'headers': [(b'host', b'testserver'),
             (b'accept', b'*/*'),
             (b'accept-encoding', b'gzip, deflate'),
             (b'connection', b'keep-alive'),
             (b'user-agent', b'testclient')],
 'http_version': '1.1',
 'method': 'GET',
 'path': '/test-protected',
 'query_string': b'',
 'raw_path': b'/test-protected',
 'root_path': '',
 'scheme': 'http',
 'server': ['testserver', 80],
 'state': {},
 'type': 'http'}
        self       = &lt;src.app.middleware.middleware.AuthMiddleware object at 0x000001265634F230&gt;
        send       = &lt;function ServerErrorMiddleware.__call__.&lt;locals&gt;._send at 0x00000126563A6340&gt;
        task_group = &lt;anyio._backends._asyncio.TaskGroup object at 0x000001265637A850&gt;
        wrapped_receive = &lt;bound method _CachedRequest.wrapped_receive of &lt;starlette.middleware.base._CachedRequest object at 0x00000126563D8410&gt;&gt;
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;src.app.middleware.middleware.AuthMiddleware object at 0x000001265634F230&gt;
request = &lt;starlette.middleware.base._CachedRequest object at 0x00000126563D8410&gt;
call_next = &lt;function BaseHTTPMiddleware.__call__.&lt;locals&gt;.call_next at 0x00000126563A6D40&gt;

    async def dispatch(self, request: Request, call_next):
      if any(request.url.path.startswith(route) for route in EXEMPT_ROUTES):
          return await call_next(request)
    
      # Extract the Authorization header
      auth_token = request.headers.get('Authorization')
      if not auth_token or not auth_token.startswith('Bearer '):
&gt;         raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,
                              detail=Response.response(MISSING_OR_INVALID_TOKEN, Status.FAIL.value, TOKEN_MISSING))
E         fastapi.exceptions.HTTPException: 401: {'status': 'fail', 'message': 'Missing or invalid token', 'error_code': 4104}

auth_token = None
call_next  = &lt;function BaseHTTPMiddleware.__call__.&lt;locals&gt;.call_next at 0x00000126563A6D40&gt;
request    = &lt;starlette.middleware.base._CachedRequest object at 0x00000126563D8410&gt;
self       = &lt;src.app.middleware.middleware.AuthMiddleware object at 0x000001265634F230&gt;

..\..\app\middleware\middleware.py:23: HTTPException</failure></testcase><testcase classname="src.tests.middleware_tests.test_middleware.TestAuthMiddleware" name="test_invalid_auth_header_format" time="0.026" /><testcase classname="src.tests.middleware_tests.test_middleware.TestAuthMiddleware" name="test_valid_token" time="0.027" /><testcase classname="src.tests.middleware_tests.test_middleware.TestAuthMiddleware" name="test_expired_token" time="0.028"><failure message="assert 200 == 401&#10; +  where 200 = &lt;Response [200 OK]&gt;.status_code">self = &lt;src.tests.middleware_tests.test_middleware.TestAuthMiddleware object at 0x00000126562AFBD0&gt;

    def test_expired_token(self):
        """Test request with expired token"""
        token = create_token(expired=True)
        response = self.client.get(
            "/test-protected",
            headers={"Authorization": f"Bearer {token}"}
        )
&gt;       assert response.status_code == 401
E       assert 200 == 401
E        +  where 200 = &lt;Response [200 OK]&gt;.status_code

response   = &lt;Response [200 OK]&gt;
self       = &lt;src.tests.middleware_tests.test_middleware.TestAuthMiddleware object at 0x00000126562AFBD0&gt;
token      = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoidGVzdC11c2VyIiwicm9sZSI6InVzZXIiLCJleHAiOjE3MzUyMjA1ODAsImlhdCI6MTczNTIxNjk4MCwibmJmIjoxNzM1MjE2OTgwfQ.r78C7wqUJD7TJcgjYWYinsofe_yqFAqy6ouocwwqM3M'

test_middleware.py:98: AssertionError</failure></testcase><testcase classname="src.tests.middleware_tests.test_middleware.TestAuthMiddleware" name="test_invalid_token" time="0.021" /><testcase classname="src.tests.middleware_tests.test_middleware.TestAuthMiddleware" name="test_missing_user_id_in_token" time="0.005"><failure message="AttributeError: module 'datetime' has no attribute 'utcnow'">self = &lt;src.tests.middleware_tests.test_middleware.TestAuthMiddleware object at 0x0000012656309850&gt;

    def test_missing_user_id_in_token(self):
        """Test token without user_id claim"""
        payload = {
            "role": Role.USER.value,
&gt;           "exp": datetime.utcnow() + timedelta(days=1)
        }
E       AttributeError: module 'datetime' has no attribute 'utcnow'

self       = &lt;src.tests.middleware_tests.test_middleware.TestAuthMiddleware object at 0x0000012656309850&gt;

test_middleware.py:116: AttributeError</failure></testcase><testcase classname="src.tests.middleware_tests.test_middleware.TestAuthMiddleware" name="test_missing_role_in_token" time="0.005"><failure message="AttributeError: module 'datetime' has no attribute 'utcnow'">self = &lt;src.tests.middleware_tests.test_middleware.TestAuthMiddleware object at 0x0000012656309950&gt;

    def test_missing_role_in_token(self):
        """Test token without role claim"""
        payload = {
            "user_id": "test-user",
&gt;           "exp": datetime.utcnow() + timedelta(days=1)
        }
E       AttributeError: module 'datetime' has no attribute 'utcnow'

self       = &lt;src.tests.middleware_tests.test_middleware.TestAuthMiddleware object at 0x0000012656309950&gt;

test_middleware.py:131: AttributeError</failure></testcase><testcase classname="src.tests.middleware_tests.test_middleware.TestAuthMiddleware" name="test_user_context_setting" time="0.044"><failure message="AssertionError: Expected 'set_user_to_context' to have been called once. Called 0 times.">self = &lt;src.tests.middleware_tests.test_middleware.TestAuthMiddleware object at 0x00000126563206E0&gt;
mock_set_context = &lt;MagicMock name='set_user_to_context' id='1264167160864'&gt;

    @patch('src.app.utils.context.set_user_to_context')
    def test_user_context_setting(self, mock_set_context):
        """Test that user context is properly set"""
        token = create_token()
        response = self.client.get(
            "/test-protected",
            headers={"Authorization": f"Bearer {token}"}
        )
    
&gt;       mock_set_context.assert_called_once()

mock_set_context = &lt;MagicMock name='set_user_to_context' id='1264167160864'&gt;
response   = &lt;Response [200 OK]&gt;
self       = &lt;src.tests.middleware_tests.test_middleware.TestAuthMiddleware object at 0x00000126563206E0&gt;
token      = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoidGVzdC11c2VyIiwicm9sZSI6InVzZXIiLCJleHAiOjE3MzUyMjA1ODAsImlhdCI6MTczNTIxNjk4MCwibmJmIjoxNzM1MjE2OTgwfQ.r78C7wqUJD7TJcgjYWYinsofe_yqFAqy6ouocwwqM3M'

test_middleware.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;MagicMock name='set_user_to_context' id='1264167160864'&gt;

    def assert_called_once(self):
        """assert that the mock was called only once.
        """
        if not self.call_count == 1:
            msg = ("Expected '%s' to have been called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
&gt;           raise AssertionError(msg)
E           AssertionError: Expected 'set_user_to_context' to have been called once. Called 0 times.

msg        = "Expected 'set_user_to_context' to have been called once. Called 0 times."
self       = &lt;MagicMock name='set_user_to_context' id='1264167160864'&gt;

C:\Program Files\Python313\Lib\unittest\mock.py:956: AssertionError</failure></testcase><testcase classname="src.tests.middleware_tests.test_middleware.TestAuthMiddleware" name="test_different_user_roles" time="0.041" /></testsuite></testsuites>