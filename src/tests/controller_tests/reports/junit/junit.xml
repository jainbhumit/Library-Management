<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="9" skipped="0" tests="9" time="10.515" timestamp="2024-12-17T17:50:48.976631+05:30" hostname="LAP-55354"><testcase classname="src.tests.controller_tests.test_user_controller.TestUserHandler" name="test_login_invalid_email" time="0.121"><failure message="AttributeError: 'dict' object has no attribute 'json'">self = &lt;src.tests.controller_tests.test_user_controller.TestUserHandler testMethod=test_login_invalid_email&gt;

    def test_login_invalid_email(self):
        """Test login with invalid email."""
        invalid_login_payload = {
            "email": "invalid_email",
            "password": "StrongPass123!"
        }
        with self.app.test_request_context(method="POST", json=invalid_login_payload):
            response, status_code = self.user_handler.login()
            self.assertEqual(status_code, 422)
&gt;           self.assertEqual(response.json["message"], EMAIL_IS_NOT_VALID)
E           AttributeError: 'dict' object has no attribute 'json'

invalid_login_payload = {'email': 'invalid_email', 'password': 'StrongPass123!'}
response   = {'error_code': 4003, 'message': 'Email is not valid', 'status': 'fail'}
self       = &lt;src.tests.controller_tests.test_user_controller.TestUserHandler testMethod=test_login_invalid_email&gt;
status_code = 422

test_user_controller.py:96: AttributeError</failure></testcase><testcase classname="src.tests.controller_tests.test_user_controller.TestUserHandler" name="test_login_success" time="0.034"><failure message="AssertionError: 422 != 200">self = &lt;src.tests.controller_tests.test_user_controller.TestUserHandler testMethod=test_login_success&gt;
mock_create_jwt_token = &lt;MagicMock name='create_jwt_token' id='1916843170448'&gt;

    @patch("src.app.utils.utils.Utils.create_jwt_token", return_value="mocked_jwt_token")
    def test_login_success(self, mock_create_jwt_token):
        """Test successful login."""
        with self.app.test_request_context(method="POST", json=self.valid_login_payload):
            self.mock_user_service.login_user.return_value = self.mock_user
    
            response, status_code = self.user_handler.login()
&gt;           self.assertEqual(status_code, 200)

mock_create_jwt_token = &lt;MagicMock name='create_jwt_token' id='1916843170448'&gt;
response   = {'error_code': 4003, 'message': 'Email is not valid', 'status': 'fail'}
self       = &lt;src.tests.controller_tests.test_user_controller.TestUserHandler testMethod=test_login_success&gt;
status_code = 422

test_user_controller.py:82: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Program Files\JetBrains\PyCharm 2024.2.4\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py:33: in _patched_equals
    old(self, first, second, msg)
E   AssertionError: 422 != 200
        error      = EqualsAssertionError(422, 200, None)
        first      = 422
        msg        = None
        old        = &lt;function TestCase.assertEqual at 0x000001BE4B0C2E80&gt;
        second     = 200
        self       = &lt;src.tests.controller_tests.test_user_controller.TestUserHandler testMethod=test_login_success&gt;
        store_exception = &lt;function store_exception at 0x000001BE4CC58040&gt;
        test_filter = None</failure></testcase><testcase classname="src.tests.controller_tests.test_user_controller.TestUserHandler" name="test_login_unexpected_error" time="0.023"><failure message="AssertionError: 422 != 400">self = &lt;src.tests.controller_tests.test_user_controller.TestUserHandler testMethod=test_login_unexpected_error&gt;

    def test_login_unexpected_error(self):
        """Test login with an unexpected error."""
        with self.app.test_request_context(method="POST", json=self.valid_login_payload):
            self.mock_user_service.login_user.side_effect = Exception("Unexpected Error")
    
            response, status_code = self.user_handler.login()
&gt;           self.assertEqual(status_code, 400)

response   = {'error_code': 4003, 'message': 'Email is not valid', 'status': 'fail'}
self       = &lt;src.tests.controller_tests.test_user_controller.TestUserHandler testMethod=test_login_unexpected_error&gt;
status_code = 422

test_user_controller.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Program Files\JetBrains\PyCharm 2024.2.4\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py:33: in _patched_equals
    old(self, first, second, msg)
E   AssertionError: 422 != 400
        error      = EqualsAssertionError(422, 400, None)
        first      = 422
        msg        = None
        old        = &lt;function TestCase.assertEqual at 0x000001BE4B0C2E80&gt;
        second     = 400
        self       = &lt;src.tests.controller_tests.test_user_controller.TestUserHandler testMethod=test_login_unexpected_error&gt;
        store_exception = &lt;function store_exception at 0x000001BE4CC58040&gt;
        test_filter = None</failure></testcase><testcase classname="src.tests.controller_tests.test_user_controller.TestUserHandler" name="test_login_user_not_found" time="0.020"><failure message="AssertionError: 422 != 400">self = &lt;src.tests.controller_tests.test_user_controller.TestUserHandler testMethod=test_login_user_not_found&gt;

    def test_login_user_not_found(self):
        """Test login with user not found."""
        with self.app.test_request_context(method="POST", json=self.valid_login_payload):
            self.mock_user_service.login_user.side_effect = Exception(INCORRECT_EMAIL_PASSWORD)
    
            response, status_code = self.user_handler.login()
&gt;           self.assertEqual(status_code, 400)

response   = {'error_code': 4003, 'message': 'Email is not valid', 'status': 'fail'}
self       = &lt;src.tests.controller_tests.test_user_controller.TestUserHandler testMethod=test_login_user_not_found&gt;
status_code = 422

test_user_controller.py:104: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Program Files\JetBrains\PyCharm 2024.2.4\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py:33: in _patched_equals
    old(self, first, second, msg)
E   AssertionError: 422 != 400
        error      = EqualsAssertionError(422, 400, None)
        first      = 422
        msg        = None
        old        = &lt;function TestCase.assertEqual at 0x000001BE4B0C2E80&gt;
        second     = 400
        self       = &lt;src.tests.controller_tests.test_user_controller.TestUserHandler testMethod=test_login_user_not_found&gt;
        store_exception = &lt;function store_exception at 0x000001BE4CC58040&gt;
        test_filter = None</failure></testcase><testcase classname="src.tests.controller_tests.test_user_controller.TestUserHandler" name="test_signup_invalid_email" time="0.018"><failure message="AttributeError: 'dict' object has no attribute 'json'">self = &lt;src.tests.controller_tests.test_user_controller.TestUserHandler testMethod=test_signup_invalid_email&gt;

    def test_signup_invalid_email(self):
        """Test signup with invalid email."""
        with self.app.test_request_context(method="POST", json=self.invalid_email_payload):
            response, status_code = self.user_handler.signup()
            self.assertEqual(status_code, 422)
&gt;           self.assertEqual(response.json["message"], EMAIL_IS_NOT_VALID)
E           AttributeError: 'dict' object has no attribute 'json'

response   = {'error_code': 4003, 'message': 'Email is not valid', 'status': 'fail'}
self       = &lt;src.tests.controller_tests.test_user_controller.TestUserHandler testMethod=test_signup_invalid_email&gt;
status_code = 422

test_user_controller.py:73: AttributeError</failure></testcase><testcase classname="src.tests.controller_tests.test_user_controller.TestUserHandler" name="test_signup_success" time="0.025"><failure message="AssertionError: 422 != 200">self = &lt;src.tests.controller_tests.test_user_controller.TestUserHandler testMethod=test_signup_success&gt;
mock_create_jwt_token = &lt;MagicMock name='create_jwt_token' id='1916842725056'&gt;

    @patch("src.app.utils.utils.Utils.create_jwt_token", return_value="mocked_jwt_token")
    def test_signup_success(self, mock_create_jwt_token):
        """Test successful signup."""
        with self.app.test_request_context(method="POST", json=self.valid_signup_payload):
            self.mock_user_service.signup_user.return_value = None
    
            response, status_code = self.user_handler.signup()
&gt;           self.assertEqual(status_code, 200)

mock_create_jwt_token = &lt;MagicMock name='create_jwt_token' id='1916842725056'&gt;
response   = {'error_code': 4003, 'message': 'Email is not valid', 'status': 'fail'}
self       = &lt;src.tests.controller_tests.test_user_controller.TestUserHandler testMethod=test_signup_success&gt;
status_code = 422

test_user_controller.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Program Files\JetBrains\PyCharm 2024.2.4\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py:33: in _patched_equals
    old(self, first, second, msg)
E   AssertionError: 422 != 200
        error      = EqualsAssertionError(422, 200, None)
        first      = 422
        msg        = None
        old        = &lt;function TestCase.assertEqual at 0x000001BE4B0C2E80&gt;
        second     = 200
        self       = &lt;src.tests.controller_tests.test_user_controller.TestUserHandler testMethod=test_signup_success&gt;
        store_exception = &lt;function store_exception at 0x000001BE4CC58040&gt;
        test_filter = None</failure></testcase><testcase classname="src.tests.controller_tests.test_user_controller.TestUserHandler" name="test_signup_unexpected_error" time="0.019"><failure message="AssertionError: 422 != 400">self = &lt;src.tests.controller_tests.test_user_controller.TestUserHandler testMethod=test_signup_unexpected_error&gt;

    def test_signup_unexpected_error(self):
        """Test signup with an unexpected error."""
        with self.app.test_request_context(method="POST", json=self.valid_signup_payload):
            self.mock_user_service.signup_user.side_effect = Exception("Unexpected Error")
    
            response, status_code = self.user_handler.signup()
&gt;           self.assertEqual(status_code, 400)

response   = {'error_code': 4003, 'message': 'Email is not valid', 'status': 'fail'}
self       = &lt;src.tests.controller_tests.test_user_controller.TestUserHandler testMethod=test_signup_unexpected_error&gt;
status_code = 422

test_user_controller.py:137: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Program Files\JetBrains\PyCharm 2024.2.4\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py:33: in _patched_equals
    old(self, first, second, msg)
E   AssertionError: 422 != 400
        error      = EqualsAssertionError(422, 400, None)
        first      = 422
        msg        = None
        old        = &lt;function TestCase.assertEqual at 0x000001BE4B0C2E80&gt;
        second     = 400
        self       = &lt;src.tests.controller_tests.test_user_controller.TestUserHandler testMethod=test_signup_unexpected_error&gt;
        store_exception = &lt;function store_exception at 0x000001BE4CC58040&gt;
        test_filter = None</failure></testcase><testcase classname="src.tests.controller_tests.test_user_controller.TestUserHandler" name="test_signup_user_already_exists" time="0.019"><failure message="AssertionError: 422 != 400">self = &lt;src.tests.controller_tests.test_user_controller.TestUserHandler testMethod=test_signup_user_already_exists&gt;

    def test_signup_user_already_exists(self):
        """Test signup with a user that already exists."""
        with self.app.test_request_context(method="POST", json=self.valid_signup_payload):
            self.mock_user_service.signup_user.side_effect = Exception(USER_ALREADY_EXISTS)
    
            response, status_code = self.user_handler.signup()
&gt;           self.assertEqual(status_code, 400)

response   = {'error_code': 4003, 'message': 'Email is not valid', 'status': 'fail'}
self       = &lt;src.tests.controller_tests.test_user_controller.TestUserHandler testMethod=test_signup_user_already_exists&gt;
status_code = 422

test_user_controller.py:128: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Program Files\JetBrains\PyCharm 2024.2.4\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py:33: in _patched_equals
    old(self, first, second, msg)
E   AssertionError: 422 != 400
        error      = EqualsAssertionError(422, 400, None)
        first      = 422
        msg        = None
        old        = &lt;function TestCase.assertEqual at 0x000001BE4B0C2E80&gt;
        second     = 400
        self       = &lt;src.tests.controller_tests.test_user_controller.TestUserHandler testMethod=test_signup_user_already_exists&gt;
        store_exception = &lt;function store_exception at 0x000001BE4CC58040&gt;
        test_filter = None</failure></testcase><testcase classname="src.tests.controller_tests.test_user_controller.TestUserHandler" name="test_signup_validation_failure" time="0.020"><failure message="AttributeError: 'dict' object has no attribute 'json'">self = &lt;src.tests.controller_tests.test_user_controller.TestUserHandler testMethod=test_signup_validation_failure&gt;

    def test_signup_validation_failure(self):
        """Test signup with validation errors for other fields."""
        invalid_payload = {
            "name": "",
            "email": "john.doe@example.com",
            "password": "short",
            "year": "abcd",
            "branch": "",
            "role": "INVALID_ROLE"
        }
        with self.app.test_request_context(method="POST", json=invalid_payload):
            response, status_code = self.user_handler.signup()
            self.assertEqual(status_code, 422)
&gt;           self.assertEqual(response.json["message"], NAME_NOT_VALID)
E           AttributeError: 'dict' object has no attribute 'json'

invalid_payload = {'branch': '',
 'email': 'john.doe@example.com',
 'name': '',
 'password': 'short',
 'role': 'INVALID_ROLE',
 'year': 'abcd'}
response   = {'error_code': 4003, 'message': 'Name is not valid', 'status': 'fail'}
self       = &lt;src.tests.controller_tests.test_user_controller.TestUserHandler testMethod=test_signup_validation_failure&gt;
status_code = 422

test_user_controller.py:120: AttributeError</failure></testcase></testsuite></testsuites>