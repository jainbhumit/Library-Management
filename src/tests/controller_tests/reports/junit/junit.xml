<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="1" time="4.359" timestamp="2024-12-27T12:03:16.096453+05:30" hostname="LAP-55354"><testcase classname="src.tests.controller_tests.test_main.TestLibraryManagementApp" name="test_database_initialized" time="0.082"><failure message="AssertionError: Database initialization failed: HTTPException - 401: {'status': 'fail', 'message': 'Missing or invalid token', 'error_code': 4104}">+ Exception Group Traceback (most recent call last):
  |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\_utils.py", line 76, in collapse_excgroups
  |     yield
  |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\middleware\base.py", line 186, in __call__
  |     async with anyio.create_task_group() as task_group:
  |                ~~~~~~~~~~~~~~~~~~~~~~~^^
  |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\anyio\_backends\_asyncio.py", line 815, in __aexit__
  |     raise BaseExceptionGroup(
  |         "unhandled errors in a TaskGroup", self._exceptions
  |     )
  | ExceptionGroup: unhandled errors in a TaskGroup (1 sub-exception)
  +-+---------------- 1 ----------------
    | Traceback (most recent call last):
    |   File "C:\Users\bjain\OneDrive - WatchGuard Technologies Inc\Python\Project\Library_Management\src\tests\controller_tests\test_main.py", line 40, in test_database_initialized
    |     response = client.get("/books")
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\testclient.py", line 514, in get
    |     return super().get(
    |            ~~~~~~~~~~~^
    |         url,
    |         ^^^^
    |     ...&lt;6 lines&gt;...
    |         extensions=extensions,
    |         ^^^^^^^^^^^^^^^^^^^^^^
    |     )
    |     ^
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\httpx\_client.py", line 1053, in get
    |     return self.request(
    |            ~~~~~~~~~~~~^
    |         "GET",
    |         ^^^^^^
    |     ...&lt;7 lines&gt;...
    |         extensions=extensions,
    |         ^^^^^^^^^^^^^^^^^^^^^^
    |     )
    |     ^
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\testclient.py", line 484, in request
    |     return super().request(
    |            ~~~~~~~~~~~~~~~^
    |         method,
    |         ^^^^^^^
    |     ...&lt;11 lines&gt;...
    |         extensions=extensions,
    |         ^^^^^^^^^^^^^^^^^^^^^^
    |     )
    |     ^
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\httpx\_client.py", line 825, in request
    |     return self.send(request, auth=auth, follow_redirects=follow_redirects)
    |            ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\httpx\_client.py", line 914, in send
    |     response = self._send_handling_auth(
    |         request,
    |     ...&lt;2 lines&gt;...
    |         history=[],
    |     )
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\httpx\_client.py", line 942, in _send_handling_auth
    |     response = self._send_handling_redirects(
    |         request,
    |         follow_redirects=follow_redirects,
    |         history=history,
    |     )
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\httpx\_client.py", line 979, in _send_handling_redirects
    |     response = self._send_single_request(request)
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\httpx\_client.py", line 1014, in _send_single_request
    |     response = transport.handle_request(request)
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\testclient.py", line 377, in handle_request
    |     raise exc
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\testclient.py", line 374, in handle_request
    |     portal.call(self.app, scope, receive, send)
    |     ~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\anyio\from_thread.py", line 290, in call
    |     return cast(T_Retval, self.start_task_soon(func, *args).result())
    |                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
    |   File "C:\Program Files\Python313\Lib\concurrent\futures\_base.py", line 456, in result
    |     return self.__get_result()
    |            ~~~~~~~~~~~~~~~~~^^
    |   File "C:\Program Files\Python313\Lib\concurrent\futures\_base.py", line 401, in __get_result
    |     raise self._exception
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\anyio\from_thread.py", line 221, in _call_func
    |     retval = await retval_or_awaitable
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\fastapi\applications.py", line 1054, in __call__
    |     await super().__call__(scope, receive, send)
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\applications.py", line 113, in __call__
    |     await self.middleware_stack(scope, receive, send)
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\middleware\errors.py", line 187, in __call__
    |     raise exc
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\middleware\errors.py", line 165, in __call__
    |     await self.app(scope, receive, _send)
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\middleware\base.py", line 185, in __call__
    |     with collapse_excgroups():
    |          ~~~~~~~~~~~~~~~~~~^^
    |   File "C:\Program Files\Python313\Lib\contextlib.py", line 162, in __exit__
    |     self.gen.throw(value)
    |     ~~~~~~~~~~~~~~^^^^^^^
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\_utils.py", line 82, in collapse_excgroups
    |     raise exc
    |   File "C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\middleware\base.py", line 187, in __call__
    |     response = await self.dispatch_func(request, call_next)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "C:\Users\bjain\OneDrive - WatchGuard Technologies Inc\Python\Project\Library_Management\src\app\middleware\middleware.py", line 23, in dispatch
    |     raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,
    |                         detail=Response.response(MISSING_OR_INVALID_TOKEN, Status.FAIL.value, TOKEN_MISSING))
    | fastapi.exceptions.HTTPException: 401: {'status': 'fail', 'message': 'Missing or invalid token', 'error_code': 4104}
    +------------------------------------

During handling of the above exception, another exception occurred:

self = &lt;src.tests.controller_tests.test_main.TestLibraryManagementApp testMethod=test_database_initialized&gt;

    def test_database_initialized(self):
        """Verify that the database is initialized during app creation"""
        try:
            app = create_app()
    
            # Make a test request that would require database access
            with TestClient(app) as client:
&gt;               response = client.get("/books")

app        = &lt;fastapi.applications.FastAPI object at 0x000002627E501E50&gt;
client     = &lt;starlette.testclient.TestClient object at 0x000002627E54CA50&gt;
self       = &lt;src.tests.controller_tests.test_main.TestLibraryManagementApp testMethod=test_database_initialized&gt;

test_main.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\testclient.py:514: in get
    return super().get(
        __class__  = &lt;class 'starlette.testclient.TestClient'&gt;
        allow_redirects = None
        auth       = &lt;httpx._client.UseClientDefault object at 0x000002627E02C2F0&gt;
        cookies    = None
        extensions = None
        follow_redirects = None
        headers    = None
        params     = None
        redirect   = &lt;httpx._client.UseClientDefault object at 0x000002627E02C2F0&gt;
        self       = &lt;starlette.testclient.TestClient object at 0x000002627E54CA50&gt;
        timeout    = &lt;httpx._client.UseClientDefault object at 0x000002627E02C2F0&gt;
        url        = '/books'
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\httpx\_client.py:1053: in get
    return self.request(
        auth       = &lt;httpx._client.UseClientDefault object at 0x000002627E02C2F0&gt;
        cookies    = None
        extensions = None
        follow_redirects = &lt;httpx._client.UseClientDefault object at 0x000002627E02C2F0&gt;
        headers    = None
        params     = None
        self       = &lt;starlette.testclient.TestClient object at 0x000002627E54CA50&gt;
        timeout    = &lt;httpx._client.UseClientDefault object at 0x000002627E02C2F0&gt;
        url        = '/books'
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\testclient.py:484: in request
    return super().request(
        __class__  = &lt;class 'starlette.testclient.TestClient'&gt;
        allow_redirects = None
        auth       = &lt;httpx._client.UseClientDefault object at 0x000002627E02C2F0&gt;
        content    = None
        cookies    = None
        data       = None
        extensions = None
        files      = None
        follow_redirects = &lt;httpx._client.UseClientDefault object at 0x000002627E02C2F0&gt;
        headers    = None
        json       = None
        method     = 'GET'
        params     = None
        redirect   = &lt;httpx._client.UseClientDefault object at 0x000002627E02C2F0&gt;
        self       = &lt;starlette.testclient.TestClient object at 0x000002627E54CA50&gt;
        timeout    = &lt;httpx._client.UseClientDefault object at 0x000002627E02C2F0&gt;
        url        = URL('http://testserver/books')
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\httpx\_client.py:825: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
        auth       = &lt;httpx._client.UseClientDefault object at 0x000002627E02C2F0&gt;
        content    = None
        cookies    = None
        data       = None
        extensions = None
        files      = None
        follow_redirects = &lt;httpx._client.UseClientDefault object at 0x000002627E02C2F0&gt;
        headers    = None
        json       = None
        method     = 'GET'
        params     = None
        request    = &lt;Request('GET', 'http://testserver/books')&gt;
        self       = &lt;starlette.testclient.TestClient object at 0x000002627E54CA50&gt;
        timeout    = &lt;httpx._client.UseClientDefault object at 0x000002627E02C2F0&gt;
        url        = URL('http://testserver/books')
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\httpx\_client.py:914: in send
    response = self._send_handling_auth(
        auth       = &lt;httpx.Auth object at 0x000002627E5B9940&gt;
        follow_redirects = True
        request    = &lt;Request('GET', 'http://testserver/books')&gt;
        self       = &lt;starlette.testclient.TestClient object at 0x000002627E54CA50&gt;
        stream     = False
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\httpx\_client.py:942: in _send_handling_auth
    response = self._send_handling_redirects(
        auth       = &lt;httpx.Auth object at 0x000002627E5B9940&gt;
        auth_flow  = &lt;generator object Auth.sync_auth_flow at 0x000002627E5BD000&gt;
        follow_redirects = True
        history    = []
        request    = &lt;Request('GET', 'http://testserver/books')&gt;
        self       = &lt;starlette.testclient.TestClient object at 0x000002627E54CA50&gt;
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\httpx\_client.py:979: in _send_handling_redirects
    response = self._send_single_request(request)
        follow_redirects = True
        history    = []
        request    = &lt;Request('GET', 'http://testserver/books')&gt;
        self       = &lt;starlette.testclient.TestClient object at 0x000002627E54CA50&gt;
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\httpx\_client.py:1014: in _send_single_request
    response = transport.handle_request(request)
        request    = &lt;Request('GET', 'http://testserver/books')&gt;
        self       = &lt;starlette.testclient.TestClient object at 0x000002627E54CA50&gt;
        start      = 341122.7333477
        transport  = &lt;starlette.testclient._TestClientTransport object at 0x000002627E54CCD0&gt;
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\testclient.py:377: in handle_request
    raise exc
        context    = None
        default_port = 80
        headers    = [(b'host', b'testserver'),
 (b'accept', b'*/*'),
 (b'accept-encoding', b'gzip, deflate'),
 (b'connection', b'keep-alive'),
 (b'user-agent', b'testclient')]
        host       = 'testserver'
        netloc     = 'testserver'
        path       = '/books'
        port       = 80
        portal     = &lt;anyio._backends._asyncio.BlockingPortal object at 0x000002627E5B8050&gt;
        query      = ''
        raw_kwargs = {'headers': [('content-length', '21'),
             ('content-type', 'text/plain; charset=utf-8')],
 'status_code': 500,
 'stream': &lt;_io.BytesIO object at 0x000002627E515E90&gt;}
        raw_path   = b'/books'
        receive    = &lt;function _TestClientTransport.handle_request.&lt;locals&gt;.receive at 0x000002627E5B6700&gt;
        request    = &lt;Request('GET', 'http://testserver/books')&gt;
        request_complete = False
        response_complete = &lt;anyio._backends._asyncio.Event object at 0x000002627E5917F0&gt;
        response_started = True
        scheme     = 'http'
        scope      = {'app': &lt;fastapi.applications.FastAPI object at 0x000002627E501E50&gt;,
 'client': ['testclient', 50000],
 'extensions': {'http.response.debug': {}},
 'headers': [(b'host', b'testserver'),
             (b'accept', b'*/*'),
             (b'accept-encoding', b'gzip, deflate'),
             (b'connection', b'keep-alive'),
             (b'user-agent', b'testclient')],
 'http_version': '1.1',
 'method': 'GET',
 'path': '/books',
 'query_string': b'',
 'raw_path': b'/books',
 'root_path': '',
 'scheme': 'http',
 'server': ['testserver', 80],
 'state': {},
 'type': 'http'}
        self       = &lt;starlette.testclient._TestClientTransport object at 0x000002627E54CCD0&gt;
        send       = &lt;function _TestClientTransport.handle_request.&lt;locals&gt;.send at 0x000002627E5B67A0&gt;
        template   = None
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\testclient.py:374: in handle_request
    portal.call(self.app, scope, receive, send)
        context    = None
        default_port = 80
        headers    = [(b'host', b'testserver'),
 (b'accept', b'*/*'),
 (b'accept-encoding', b'gzip, deflate'),
 (b'connection', b'keep-alive'),
 (b'user-agent', b'testclient')]
        host       = 'testserver'
        netloc     = 'testserver'
        path       = '/books'
        port       = 80
        portal     = &lt;anyio._backends._asyncio.BlockingPortal object at 0x000002627E5B8050&gt;
        query      = ''
        raw_kwargs = {'headers': [('content-length', '21'),
             ('content-type', 'text/plain; charset=utf-8')],
 'status_code': 500,
 'stream': &lt;_io.BytesIO object at 0x000002627E515E90&gt;}
        raw_path   = b'/books'
        receive    = &lt;function _TestClientTransport.handle_request.&lt;locals&gt;.receive at 0x000002627E5B6700&gt;
        request    = &lt;Request('GET', 'http://testserver/books')&gt;
        request_complete = False
        response_complete = &lt;anyio._backends._asyncio.Event object at 0x000002627E5917F0&gt;
        response_started = True
        scheme     = 'http'
        scope      = {'app': &lt;fastapi.applications.FastAPI object at 0x000002627E501E50&gt;,
 'client': ['testclient', 50000],
 'extensions': {'http.response.debug': {}},
 'headers': [(b'host', b'testserver'),
             (b'accept', b'*/*'),
             (b'accept-encoding', b'gzip, deflate'),
             (b'connection', b'keep-alive'),
             (b'user-agent', b'testclient')],
 'http_version': '1.1',
 'method': 'GET',
 'path': '/books',
 'query_string': b'',
 'raw_path': b'/books',
 'root_path': '',
 'scheme': 'http',
 'server': ['testserver', 80],
 'state': {},
 'type': 'http'}
        self       = &lt;starlette.testclient._TestClientTransport object at 0x000002627E54CCD0&gt;
        send       = &lt;function _TestClientTransport.handle_request.&lt;locals&gt;.send at 0x000002627E5B67A0&gt;
        template   = None
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\anyio\from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
        args       = ({'app': &lt;fastapi.applications.FastAPI object at 0x000002627E501E50&gt;,
  'client': ['testclient', 50000],
  'extensions': {'http.response.debug': {}},
  'headers': [(b'host', b'testserver'),
              (b'accept', b'*/*'),
              (b'accept-encoding', b'gzip, deflate'),
              (b'connection', b'keep-alive'),
              (b'user-agent', b'testclient')],
  'http_version': '1.1',
  'method': 'GET',
  'path': '/books',
  'query_string': b'',
  'raw_path': b'/books',
  'root_path': '',
  'scheme': 'http',
  'server': ['testserver', 80],
  'state': {},
  'type': 'http'},
 &lt;function _TestClientTransport.handle_request.&lt;locals&gt;.receive at 0x000002627E5B6700&gt;,
 &lt;function _TestClientTransport.handle_request.&lt;locals&gt;.send at 0x000002627E5B67A0&gt;)
        func       = &lt;fastapi.applications.FastAPI object at 0x000002627E501E50&gt;
        self       = &lt;anyio._backends._asyncio.BlockingPortal object at 0x000002627E5B8050&gt;
C:\Program Files\Python313\Lib\concurrent\futures\_base.py:456: in result
    return self.__get_result()
        self       = None
        timeout    = None
C:\Program Files\Python313\Lib\concurrent\futures\_base.py:401: in __get_result
    raise self._exception
        self       = None
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\anyio\from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
        args       = ({'app': &lt;fastapi.applications.FastAPI object at 0x000002627E501E50&gt;,
  'client': ['testclient', 50000],
  'extensions': {'http.response.debug': {}},
  'headers': [(b'host', b'testserver'),
              (b'accept', b'*/*'),
              (b'accept-encoding', b'gzip, deflate'),
              (b'connection', b'keep-alive'),
              (b'user-agent', b'testclient')],
  'http_version': '1.1',
  'method': 'GET',
  'path': '/books',
  'query_string': b'',
  'raw_path': b'/books',
  'root_path': '',
  'scheme': 'http',
  'server': ['testserver', 80],
  'state': {},
  'type': 'http'},
 &lt;function _TestClientTransport.handle_request.&lt;locals&gt;.receive at 0x000002627E5B6700&gt;,
 &lt;function _TestClientTransport.handle_request.&lt;locals&gt;.send at 0x000002627E5B67A0&gt;)
        callback   = &lt;function BlockingPortal._call_func.&lt;locals&gt;.callback at 0x000002627E5B6340&gt;
        func       = &lt;fastapi.applications.FastAPI object at 0x000002627E501E50&gt;
        future     = &lt;Future at 0x2627e53ae00 state=finished raised HTTPException&gt;
        kwargs     = {}
        retval_or_awaitable = &lt;coroutine object FastAPI.__call__ at 0x000002627E5736A0&gt;
        scope      = None
        self       = &lt;anyio._backends._asyncio.BlockingPortal object at 0x000002627E5B8050&gt;
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\fastapi\applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
        __class__  = &lt;class 'fastapi.applications.FastAPI'&gt;
        receive    = &lt;function _TestClientTransport.handle_request.&lt;locals&gt;.receive at 0x000002627E5B6700&gt;
        scope      = {'app': &lt;fastapi.applications.FastAPI object at 0x000002627E501E50&gt;,
 'client': ['testclient', 50000],
 'extensions': {'http.response.debug': {}},
 'headers': [(b'host', b'testserver'),
             (b'accept', b'*/*'),
             (b'accept-encoding', b'gzip, deflate'),
             (b'connection', b'keep-alive'),
             (b'user-agent', b'testclient')],
 'http_version': '1.1',
 'method': 'GET',
 'path': '/books',
 'query_string': b'',
 'raw_path': b'/books',
 'root_path': '',
 'scheme': 'http',
 'server': ['testserver', 80],
 'state': {},
 'type': 'http'}
        self       = &lt;fastapi.applications.FastAPI object at 0x000002627E501E50&gt;
        send       = &lt;function _TestClientTransport.handle_request.&lt;locals&gt;.send at 0x000002627E5B67A0&gt;
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\applications.py:113: in __call__
    await self.middleware_stack(scope, receive, send)
        receive    = &lt;function _TestClientTransport.handle_request.&lt;locals&gt;.receive at 0x000002627E5B6700&gt;
        scope      = {'app': &lt;fastapi.applications.FastAPI object at 0x000002627E501E50&gt;,
 'client': ['testclient', 50000],
 'extensions': {'http.response.debug': {}},
 'headers': [(b'host', b'testserver'),
             (b'accept', b'*/*'),
             (b'accept-encoding', b'gzip, deflate'),
             (b'connection', b'keep-alive'),
             (b'user-agent', b'testclient')],
 'http_version': '1.1',
 'method': 'GET',
 'path': '/books',
 'query_string': b'',
 'raw_path': b'/books',
 'root_path': '',
 'scheme': 'http',
 'server': ['testserver', 80],
 'state': {},
 'type': 'http'}
        self       = &lt;fastapi.applications.FastAPI object at 0x000002627E501E50&gt;
        send       = &lt;function _TestClientTransport.handle_request.&lt;locals&gt;.send at 0x000002627E5B67A0&gt;
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\middleware\errors.py:187: in __call__
    raise exc
        _send      = &lt;function ServerErrorMiddleware.__call__.&lt;locals&gt;._send at 0x000002627E5B6A20&gt;
        receive    = &lt;function _TestClientTransport.handle_request.&lt;locals&gt;.receive at 0x000002627E5B6700&gt;
        request    = &lt;starlette.requests.Request object at 0x000002627E5B9FD0&gt;
        response   = &lt;starlette.responses.PlainTextResponse object at 0x000002627E5BA120&gt;
        response_started = False
        scope      = {'app': &lt;fastapi.applications.FastAPI object at 0x000002627E501E50&gt;,
 'client': ['testclient', 50000],
 'extensions': {'http.response.debug': {}},
 'headers': [(b'host', b'testserver'),
             (b'accept', b'*/*'),
             (b'accept-encoding', b'gzip, deflate'),
             (b'connection', b'keep-alive'),
             (b'user-agent', b'testclient')],
 'http_version': '1.1',
 'method': 'GET',
 'path': '/books',
 'query_string': b'',
 'raw_path': b'/books',
 'root_path': '',
 'scheme': 'http',
 'server': ['testserver', 80],
 'state': {},
 'type': 'http'}
        self       = &lt;starlette.middleware.errors.ServerErrorMiddleware object at 0x000002627E5B8EC0&gt;
        send       = &lt;function _TestClientTransport.handle_request.&lt;locals&gt;.send at 0x000002627E5B67A0&gt;
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\middleware\errors.py:165: in __call__
    await self.app(scope, receive, _send)
        _send      = &lt;function ServerErrorMiddleware.__call__.&lt;locals&gt;._send at 0x000002627E5B6A20&gt;
        receive    = &lt;function _TestClientTransport.handle_request.&lt;locals&gt;.receive at 0x000002627E5B6700&gt;
        request    = &lt;starlette.requests.Request object at 0x000002627E5B9FD0&gt;
        response   = &lt;starlette.responses.PlainTextResponse object at 0x000002627E5BA120&gt;
        response_started = False
        scope      = {'app': &lt;fastapi.applications.FastAPI object at 0x000002627E501E50&gt;,
 'client': ['testclient', 50000],
 'extensions': {'http.response.debug': {}},
 'headers': [(b'host', b'testserver'),
             (b'accept', b'*/*'),
             (b'accept-encoding', b'gzip, deflate'),
             (b'connection', b'keep-alive'),
             (b'user-agent', b'testclient')],
 'http_version': '1.1',
 'method': 'GET',
 'path': '/books',
 'query_string': b'',
 'raw_path': b'/books',
 'root_path': '',
 'scheme': 'http',
 'server': ['testserver', 80],
 'state': {},
 'type': 'http'}
        self       = &lt;starlette.middleware.errors.ServerErrorMiddleware object at 0x000002627E5B8EC0&gt;
        send       = &lt;function _TestClientTransport.handle_request.&lt;locals&gt;.send at 0x000002627E5B67A0&gt;
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\middleware\base.py:185: in __call__
    with collapse_excgroups():
        call_next  = &lt;function BaseHTTPMiddleware.__call__.&lt;locals&gt;.call_next at 0x000002627E5B6B60&gt;
        receive    = &lt;function _TestClientTransport.handle_request.&lt;locals&gt;.receive at 0x000002627E5B6700&gt;
        request    = &lt;starlette.middleware.base._CachedRequest object at 0x000002627E5B92B0&gt;
        response_sent = &lt;anyio._backends._asyncio.Event object at 0x000002627E53B130&gt;
        scope      = {'app': &lt;fastapi.applications.FastAPI object at 0x000002627E501E50&gt;,
 'client': ['testclient', 50000],
 'extensions': {'http.response.debug': {}},
 'headers': [(b'host', b'testserver'),
             (b'accept', b'*/*'),
             (b'accept-encoding', b'gzip, deflate'),
             (b'connection', b'keep-alive'),
             (b'user-agent', b'testclient')],
 'http_version': '1.1',
 'method': 'GET',
 'path': '/books',
 'query_string': b'',
 'raw_path': b'/books',
 'root_path': '',
 'scheme': 'http',
 'server': ['testserver', 80],
 'state': {},
 'type': 'http'}
        self       = &lt;src.app.middleware.middleware.AuthMiddleware object at 0x000002627E5B8D70&gt;
        send       = &lt;function ServerErrorMiddleware.__call__.&lt;locals&gt;._send at 0x000002627E5B6A20&gt;
        task_group = &lt;anyio._backends._asyncio.TaskGroup object at 0x000002627E5D42D0&gt;
        wrapped_receive = &lt;bound method _CachedRequest.wrapped_receive of &lt;starlette.middleware.base._CachedRequest object at 0x000002627E5B92B0&gt;&gt;
C:\Program Files\Python313\Lib\contextlib.py:162: in __exit__
    self.gen.throw(value)
        self       = &lt;contextlib._GeneratorContextManager object at 0x000002627E586120&gt;
        traceback  = &lt;traceback object at 0x000002627E5D2180&gt;
        typ        = &lt;class 'ExceptionGroup'&gt;
        value      = ExceptionGroup('unhandled errors in a TaskGroup', [HTTPException(status_code=401, detail={'status': 'fail', 'message': 'Missing or invalid token', 'error_code': 4104})])
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\_utils.py:82: in collapse_excgroups
    raise exc
C:\Users\bjain\AppData\Roaming\Python\Python313\site-packages\starlette\middleware\base.py:187: in __call__
    response = await self.dispatch_func(request, call_next)
        call_next  = &lt;function BaseHTTPMiddleware.__call__.&lt;locals&gt;.call_next at 0x000002627E5B6B60&gt;
        receive    = &lt;function _TestClientTransport.handle_request.&lt;locals&gt;.receive at 0x000002627E5B6700&gt;
        request    = &lt;starlette.middleware.base._CachedRequest object at 0x000002627E5B92B0&gt;
        response_sent = &lt;anyio._backends._asyncio.Event object at 0x000002627E53B130&gt;
        scope      = {'app': &lt;fastapi.applications.FastAPI object at 0x000002627E501E50&gt;,
 'client': ['testclient', 50000],
 'extensions': {'http.response.debug': {}},
 'headers': [(b'host', b'testserver'),
             (b'accept', b'*/*'),
             (b'accept-encoding', b'gzip, deflate'),
             (b'connection', b'keep-alive'),
             (b'user-agent', b'testclient')],
 'http_version': '1.1',
 'method': 'GET',
 'path': '/books',
 'query_string': b'',
 'raw_path': b'/books',
 'root_path': '',
 'scheme': 'http',
 'server': ['testserver', 80],
 'state': {},
 'type': 'http'}
        self       = &lt;src.app.middleware.middleware.AuthMiddleware object at 0x000002627E5B8D70&gt;
        send       = &lt;function ServerErrorMiddleware.__call__.&lt;locals&gt;._send at 0x000002627E5B6A20&gt;
        task_group = &lt;anyio._backends._asyncio.TaskGroup object at 0x000002627E5D42D0&gt;
        wrapped_receive = &lt;bound method _CachedRequest.wrapped_receive of &lt;starlette.middleware.base._CachedRequest object at 0x000002627E5B92B0&gt;&gt;
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;src.app.middleware.middleware.AuthMiddleware object at 0x000002627E5B8D70&gt;
request = &lt;starlette.middleware.base._CachedRequest object at 0x000002627E5B92B0&gt;
call_next = &lt;function BaseHTTPMiddleware.__call__.&lt;locals&gt;.call_next at 0x000002627E5B6B60&gt;

    async def dispatch(self, request: Request, call_next):
      if any(request.url.path.startswith(route) for route in EXEMPT_ROUTES):
          return await call_next(request)
    
      # Extract the Authorization header
      auth_token = request.headers.get('Authorization')
      if not auth_token or not auth_token.startswith('Bearer '):
&gt;         raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,
                              detail=Response.response(MISSING_OR_INVALID_TOKEN, Status.FAIL.value, TOKEN_MISSING))
E         fastapi.exceptions.HTTPException: 401: {'status': 'fail', 'message': 'Missing or invalid token', 'error_code': 4104}

auth_token = None
call_next  = &lt;function BaseHTTPMiddleware.__call__.&lt;locals&gt;.call_next at 0x000002627E5B6B60&gt;
request    = &lt;starlette.middleware.base._CachedRequest object at 0x000002627E5B92B0&gt;
self       = &lt;src.app.middleware.middleware.AuthMiddleware object at 0x000002627E5B8D70&gt;

..\..\app\middleware\middleware.py:23: HTTPException

During handling of the above exception, another exception occurred:

self = &lt;src.tests.controller_tests.test_main.TestLibraryManagementApp testMethod=test_database_initialized&gt;

    def test_database_initialized(self):
        """Verify that the database is initialized during app creation"""
        try:
            app = create_app()
    
            # Make a test request that would require database access
            with TestClient(app) as client:
                response = client.get("/books")
                # We expect either 200 (success) or 401 (unauthorized)
                # Both indicate DB initialization was successful
                self.assertIn(response.status_code, [200, 401])
    
        except Exception as e:
&gt;           self.fail(f"Database initialization failed: {type(e).__name__} - {e}")
E           AssertionError: Database initialization failed: HTTPException - 401: {'status': 'fail', 'message': 'Missing or invalid token', 'error_code': 4104}

app        = &lt;fastapi.applications.FastAPI object at 0x000002627E501E50&gt;
client     = &lt;starlette.testclient.TestClient object at 0x000002627E54CA50&gt;
self       = &lt;src.tests.controller_tests.test_main.TestLibraryManagementApp testMethod=test_database_initialized&gt;

test_main.py:46: AssertionError</failure></testcase></testsuite></testsuites>